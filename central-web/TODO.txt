	- develop in C++ for RPi:
http://www.raspberry-projects.com/pi/programming-in-c/compilers-and-ides/netbeans-windows/installing-netbeans-for-c-remote-development-on-a-raspberry-pi
x		- install netbeans
x		- setup RPi2 correctly (remove bluetooth, ensure dev packages installed, root login)
x		- perform small sample project test
x		- ensure bcm library is available
			cd /home/pi
			wget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.46.tar.gz
			gunzip bcm2835-1.46.tar.gz
			tar xvf bcm2835-1.46.tar
			cd bcm2835-1.46
			./configure
			make
			sudo make check
			sudo make install
x		- statistic packets losses
			2000 packets sent
			201 dropped (117 missing IRQ) => 89.95% success
			1830 retries
			84 packets resent 15 times and failed = 1260 retries
			1799 packets, 570 retries => 31.7% retries

x		- install zero mq and build (as pi user)
			sudo apt-get install automake
			sudo apt-get install uuid-dev
			
			cd /home/pi
			wget https://github.com/jedisct1/libsodium/releases/download/1.0.4/libsodium-1.0.4.tar.gz
			gunzip libsodium-1.0.4.tar.gz
			tar xvf libsodium-1.0.4.tar
			cd libsodium-1.0.4
			./configure
			make
			make check
			sudo make install
			
			wget http://download.zeromq.org/zeromq-4.1.3.tar.gz
			gunzip zeromq-4.1.3.tar.gz
			tar xvf zeromq-4.1.3.tar
			cd zeromq-4.1.3/
			./configure
			make
			sudo make install
			sudo ldconfig
			make check
		
x		- create small sample in C++ to check ZMQ C-C
			- PUB/SUB need absolute ipc path (ipc:///tmp/xxx.ipc) to work properly
			- same for REQ/REP

		- improve sample to check C-Python
x			- install pyzmq on RPi and Windows
				pip install pyzmq (in virtualenv)
x			- small Python program to "talk" with C++ process
OK			- check publish is not blocked by slow subscriber????

x		- update RFManager (C++):
			- improve XTEA performance by pre-computing coefficients when setting key
			
		- commit
		- check make on RPi
			
8h		- update central-web (Python):
			- use ZMQ
			- remove NRF24 altogether
			- launch collector process
			- send commands (START/STOP/LOCKED/UNLOCKED...)
			- receive data and post events asynchronously
		
4h		- DEBUG
		
		- potential improvements
			- replace read IRQ pin with event on falling edge?
			
		- change NRF24 with enhanced one and compare statistics
		
		- check remote debugging
		

		- try arduino build on netbeans?
		- try python build on netbeans?
		
		
	- Raspberry Pi
		- need NRF24 in C/C++ because Python is too slow here
		http://www.airspayce.com/mikem/bcm2835/
		- idea is to port Cosa NRF24 to RPi to work exactly the same (only SPI API is different)
		- then develop small program to verify it works fine (no intelligence):
			- wait for device message
			- print message
			- reply message as expected by device
			- include XTEA in C++
		- then develop a small process that:
			- gets info from Web server (IPC TBD): devices ID, status...
			- wait for device frames, reply immediately and queue msg to Web server (IPC TBD)
		- IPC:
			zeromq for queues?
			protobuf for serialization?
			
			
	- Raspberry Pi port
x		- rewrite device manager for NRF24
x		- check everything still works on PC with simulated devices
2h		- upload to raspberry pi and debug
x			- create venv and load all deps
x			- write how to launch (sudo python ...) in README
x			- create config
x			- monitor config with SPI
x			- add all pi requirements (new txt)
x			- deactivate deadlocks?
x			- check kb id => 0x10
x				- check config keyboard 16
x			- issue on killing app -> pins not freed -> next run will fail...
30'		- commit/push from RPi!

			- code issues (encryption?) investigate

??			- issue with XTEA encryption?
1h+			- debug...

30'		- commit/push from RPi!

1h		- finally remove alarm-system/central dir? (or keep small app for debug?)

	- review PCB design of keypad module
		- no debug LED
		- more DIP switches?
		- or consider using serial number (One Wire Interface, to be checked with Cosa)
			- also need to buy some of these components (check available sensors also)
		
	
	- bug: go to monitoring when there is no active configuration...
	
30'	- if "current" config is changed, previous config must be forced inactive if needed
		- maybe need confirm message?
30'	- configuration changes of an active config should be limited
		- or there should be mechanisms to propagate change to MonitoringManager
		(because devices are deep copies of config devices, hence are not up-to-date)
		
1h	- review FIXME
1h	- review TODO
		
	- consider using marshmallow instead of flask restful marshalling?
	- consider replacing webargs with just marshmallow then?
	- remove flask-restful in the end?
	- improve webargs to support bundle_errors if keep webargs
		
2h	- improve component loading:
		- factor GlobalViewModel and ComponentLoader into viewmodel-utils.js
		- VM should just specify the feature name
		- component binding should use feature name + type (dialog, content...)
		- make GlobalVM automatically find out all component elements in DOM
			- use class for real DOM elements, but how to deal with <!-- ko ... -->
		- remove console.log()
2h	- javascript: make it more modular?
		- investigate requirejs
		- how to create "subclasses"?

	- bug: when token expired (401), login dialog does not always appear automatically...
		- use case: signin, go to monitor, stop server for 10' (token duration), restart,
		all monitor status request get 401 but nothing else happens...
	
	- open points/bugs:
		- bugs on "required" on server side: it is currently possible to create a user with empty name/fullname/password!
			-> this is due to not submitting the form!
		- all REST resources: improve webargs checks by providing dedicated checks
		
	- open questions:
		- validation? suggested to use jQuery validation: what's that?
		
	- security:
		- check prevention against SVG exploits
		
	- improve DB model to:
		- have several lock codes for a config, each with an associated message
		  (typically: owner)
2h	- add correct SQL exception handling in all REST calls POST/PUT
		- unique key => special warning message
		- reference key => other special warning
	
30'	- improve CSS for every screen; check padding/margins in particular
2h	- review labels/titles everywhere and review look overall

1h+	- improve function to cleanup alert history:
		- for a given config
		- for a given period of time
		- for a given level of alert
		
15'	- check no possible direct access to some routes
30'	- force password change (when password empty)

	- monitoring:
		- [LATER] filter alerts stored upon events when status is unlocked
			- eg presence detected
		
1h	- infer on i18n

	- add email?
	
