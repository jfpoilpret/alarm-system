	- update flask-bootstrap dependency whenever a new release is rolled out,
	including the fix for bug: https://github.com/mbr/flask-bootstrap/issues/90
	
	- Major refactoring: AJAX+RESTful webapp 

		- security (login, token)
1h			- profile + passord dialogs: issue as they must not remove current feature!!
			
30'			- combine all css into one!
30'			- remove all extra stuff (js, css, html)
1h			- global tests/debug
			
30'			- add authorization (role) checks to all REST resources
30'			- implement logout
15'			- error messages on login
30'			- ensure login form appears in case token is expired
			
15'		- root route
15'		- remove flask WTF dependency
15'		- review all computed and replace with pureComputed when possible
	
2h		- cleanup wep site part:
			- only 2 blueprints: API Vs. Web
			=> rename all html and css to be more meaningful (rather than "home"...)

3h		- improve webargs to support bundle_errors

		- consider using marshmallow instead of flask restful marshalling?
		- remove flask-restful in the end?
		
2h		- javascript: make it more modular?
			- investigate requirejs
			- how to deal with SVGHandlers (currently in global namespace...)
			- how to create "subclasses"?
			
1h		- ensure flash messages are cleared whenever needed, in particular when 
		canceling dialog

		- open points/bugs:
			- link profile ViewModel to UsersViewModel somehow
			- bind navbar to profile ViewModel
			- bugs on "required" on server side: it is currently possible to create a user with empty name/fullname/password!
				-> this is due to not submitting the form!
			- all REST resources: improve reqparse args checks by providing dedicated checks
		
	- open questions:
		- validation? suggested to use jQuery validation: what's that?
		
	- security:
		- check prevention against SVG exploits
		
30'	- if "current" config is changed, previous config must be forced inactive if needed
		- maybe need confirm message?
30'	- configuration changes of an active config should be limited
		- or there should be mechanisms to propagate change to MonitoringManager
		(because devices are deep copies of config devices, hence are not up-to-date)
		
30'	- review all .js files: lowercase filename only!
		- VM ensure private methods are defined as var instead of self.
15'	- review all .py headers (encoding!)
15'	- ensure all classes use new-style classes (subclass object)
1h	- rename "private" methods with leading underscore (convention)
30'	- review all FIXME/TODO

	- improve DB model to:
		- have several codes for a config, each with an associated message
		  (typically: owner)
1h	- review models to ensure completeness of relationships and efficiency; in particular
	  try to limit manual queries performed in code if not needed!
		(search for .query.)
2h	- add correct SQL exception handling in all REST calls POST/PUT
		- unique key => special warning message
		- reference key => other special warning
	
1h	- refactor CSS files
		one css per module, with same name as module or one unique name, the same across all modules...)
		remove obsolete styles (some selectors don't exist any more after refactoring...)
30'	- improve CSS files for every screen; check padding/margins in particular
2h	- review labels/titles everywhere and review look overall
1h	- ensure focus is set on first field of dialog

1h+	- improve function to cleanup alert history:
		- for a given config
		- for a given period of time
		- for a given level of alert
		
15'	- check no possible direct access to some routes
30'	- force password change (when password empty)

	- monitoring:
		- [LATER] filter alerts stored upon events when status is unlocked
			- eg presence detected
		
1h	- infer on i18n

	- add email?
	
2h	- add NRF24 and scanning thread
	
