	- develop in C++ for RPi:
http://www.raspberry-projects.com/pi/programming-in-c/compilers-and-ides/netbeans-windows/installing-netbeans-for-c-remote-development-on-a-raspberry-pi
x		- install netbeans
x		- setup RPi2 correctly (remove bluetooth, ensure dev packages installed, root login)
x		- perform small sample project test
		- install cppunit if needed
			sudo apt-get install libcppunit-1.12.1
			sudo apt-get install libcppunit-dev
x		- ensure bcm library is available
			cd /home/pi
			wget http://www.airspayce.com/mikem/bcm2835/bcm2835-1.46.tar.gz
			gunzip bcm2835-1.46.tar.gz
			tar xvf bcm2835-1.46.tar
			cd bcm2835-1.46
			./configure
			make
			sudo make check
			sudo make install
x		- statistic packets losses
			2000 packets sent
			201 dropped (117 missing IRQ) => 89.95% success
			1830 retries
			84 packets resent 15 times and failed = 1260 retries
			1799 packets, 570 retries => 31.7% retries

x		- install zero mq and build (as pi user)
			sudo apt-get install automake
			sudo apt-get install uuid-dev
			
			cd /home/pi
			wget https://github.com/jedisct1/libsodium/releases/download/1.0.4/libsodium-1.0.4.tar.gz
			gunzip libsodium-1.0.4.tar.gz
			tar xvf libsodium-1.0.4.tar
			cd libsodium-1.0.4
			./configure
			make
			make check
			sudo make install
			
			wget http://download.zeromq.org/zeromq-4.1.3.tar.gz
			gunzip zeromq-4.1.3.tar.gz
			tar xvf zeromq-4.1.3.tar
			cd zeromq-4.1.3/
			./configure
			make
			sudo make install
			sudo ldconfig
			make check
	
	- RFManager improvements:
1h		- improve command archive file handling:
			- STOP should not erase content (INIT is useful)
			- but should not store all START/STOP only last state is useful
			- maybe split into several files:
				- one file for INIT command (only 1)
				- one file for status START or STOP
				- one file for lock code?
1h		- improve RF messages handling design to make it more extensible
30'		- NRF24: replace read IRQ pin with event on falling edge?
			
1h	- improve global system launch
		- one shell to launch rfmanager first (and monitor forever) and then python
			
1h	- update requirements.txt and README
2h	- use python 3.4 instead of 2.7?
	
	- try SCANA+ logic analyzer
	- try arduino build on netbeans?
	- try python build on netbeans?
		
1h	- finally remove alarm-system/central dir? (or keep small app for debug?)

	- review PCB design of keypad module
		- no debug LED
		- more DIP switches?
		- or consider using serial number (One Wire Interface, to be checked with Cosa)
			- also need to buy some of these components (check available sensors also)
		
	
	- bug: go to monitoring when there is no active configuration...
	
30'	- if "current" config is changed, previous config must be forced inactive if needed
		- maybe need confirm message?
30'	- configuration changes of an active config should be limited
		- or there should be mechanisms to propagate change to MonitoringManager
		(because devices are deep copies of config devices, hence are not up-to-date)
		
1h	- review FIXME
1h	- review TODO
		
	- consider using marshmallow instead of flask restful marshalling?
	- consider replacing webargs with just marshmallow then?
	- remove flask-restful in the end?
	- improve webargs to support bundle_errors if keep webargs
		
2h	- improve component loading:
		- factor GlobalViewModel and ComponentLoader into viewmodel-utils.js
		- VM should just specify the feature name
		- component binding should use feature name + type (dialog, content...)
		- make GlobalVM automatically find out all component elements in DOM
			- use class for real DOM elements, but how to deal with <!-- ko ... -->
		- remove console.log()
2h	- javascript: make it more modular?
		- investigate requirejs
		- how to create "subclasses"?

	- bug: when token expired (401), login dialog does not always appear automatically...
		- use case: signin, go to monitor, stop server for 10' (token duration), restart,
		all monitor status request get 401 but nothing else happens...
	
	- open points/bugs:
		- bugs on "required" on server side: it is currently possible to create a user with empty name/fullname/password!
			-> this is due to not submitting the form!
		- all REST resources: improve webargs checks by providing dedicated checks
		
	- open questions:
		- validation? suggested to use jQuery validation: what's that?
		
	- security:
		- check prevention against SVG exploits
		
	- improve DB model to:
		- have several lock codes for a config, each with an associated message
		  (typically: owner)
2h	- add correct SQL exception handling in all REST calls POST/PUT
		- unique key => special warning message
		- reference key => other special warning
	
30'	- improve CSS for every screen; check padding/margins in particular
2h	- review labels/titles everywhere and review look overall

1h+	- improve function to cleanup alert history:
		- for a given config
		- for a given period of time
		- for a given level of alert
		
15'	- check no possible direct access to some routes
30'	- force password change (when password empty)

	- monitoring:
		- [LATER] filter alerts stored upon events when status is unlocked
			- eg presence detected
		
1h	- infer on i18n

	- add email?
	
