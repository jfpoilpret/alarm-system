	- update flask-bootstrap dependency whenever a new release is rolled out,
	including the fix for bug: https://github.com/mbr/flask-bootstrap/issues/90
	
	- AJAX refactoring
		- all rendering always done in flask (server-side)
		- JS only attaches rendered HTML to the right place in the DOM
		- render as much as possible in flask, in particular use forms for rendering
			-> never populate forms from JSON on cient-side 
				=> too much work (to produce JSON in flask and to populate form in JS)!
			-> same for form errors => return the rendered form (includes error)
			-> same for flash messages
		- AJAX calls:
			return simple JSON with:
				- result OK/KO (not sure if really needed)
				- flash_messages [] (replace all flash container content)
				- form id: id of form which content to replace
				- form: new form content (including <form> tag)
		- html templates:
			- one for each form (including <form> tag)
			- one for flash messages (already done)
			- one home.html for every main page (already done)
		- JS:
			- essentially event handler with simple AJAX calls and simple callback
			- callback just replaces flash messages and form id
			- careful about lost event handlers (or try to use jQuery delegate!)
			
	- future refactoring:
		- AJAX+RESTful webapp (but not exactly single page: one page per main menu in fact)
		- consider template engine in javascript (nunjucks? handlebars?...)
		- Flask-RESTful extension with JSON marshallers
		- how to deal with authentication to REST API?
			=> server would not render html during AJAX calls anymore
		- evaluate the benefits and the cost first!
			- Javascript rendering performance?
			- build process complexification (template compilation)
			- XSS protection?
			- CSRF protection (no use of flask-wtf anymore!)
			- payload size (js + templates)
		
??	- monitoring bug:
		- alerts don't show module any more?
		
	- refactor configuration UI
30'		- improve look & feel of edit config dialog
			- click new module button does not rollup after rolldown!
			- new module button too near edit module inline form!
		
4h	- refactor admin/users UI
		- use dialog for my profile and modify my password => common javascript everywhere
		- use diqlog to create/modify user (admin only)
	
	- refactor all AJAX form submission code to use FormData?
		- if it works, it is musch simpler code!
		
30'	- if "current" config is changed, previous config must be forced inactive if needed
		- maybe need confirm message?
30'	- configuration changes of an active config should be limited
		- or there should be mechanisms to propagate change to MonitoringManager
		(because devices are deep copies of config devices, hence are not up-to-date)
		
15'	- review all .py headers (encoding!)
15'	- ensure all classes use new-style classes (subclass object)
1h	- rename "private" methods with leading underscore (convention)
30'	- review all FIXME/TODO

30'	- refactoring of JavaScript form validation through AJAX
1h	- monitoring UI bug
		- Clear History often leads to CSRF token error???...
30'	- monitoring UI:
		- improve error display in AJAX if possible 
		(avoid flash messages and replace with <p class="help-block">xxx</p>)
		not sure it is OK with inline forms?
		- improve alerts tab when not active, by displaying badge with number of new alerts
		(will require special AJAX code to get the number of new alerts only)
	
	- improve DB model to:
		- have several codes for a config, each with an associated message
		  (typically: owner)
1h	- review models to ensure completeness of relationships and efficiency; in particular
	  try to limit manual queries performed in code if not needed!
		(search for .query.)
2h	- add correct SQL exception handling in all routes
		- unique key => special warning message
		- reference key => other special warning
	
30'	- refactor CSS files (one css per module, with same name as module or 
	  one unique name, the same across all modules...)
30'	- improve CSS files for every screen; check padding/margins in particular
45'	- review labels/titles everywhere

1h+	- improve function to cleanup alert history:
		- for a given config
		- for a given period of time
		- for a given level of alert
		
15'	- check no possible direct access to some routes
30'	- force password change (when password empty)

	- monitoring:
		- [LATER] filter alerts stored upon events when status is unlocked
			- eg presence detected
		
1h	- infer on i18n

	- add email?
	
2h	- add NRF24 and scanning thread
	
