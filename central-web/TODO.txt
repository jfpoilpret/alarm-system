	- refactor configuration UI
		- more AJAX (just like monitoring UI)
		- UX:
x			- create config as modal dialog
x				- pure AJAX to save config -> use FormData for that
x			- improve flash messages transmission (AJAX)
2h			- edit config as modal dialog
				- pure AJAX to save config
1h			- refactor create/edit as much as possible (html, javascript, python)
2h			- new: advanced config modal dialog
				- alerts repeat for no ping
				- alerts repeat and thresholds for voltage
		
	- configuration must include addition settings used in monitoring:
		- thresholds of alerts for no pings and voltage
		- do it at DB time, reset DB
		- update UI config UI!
		- update Monitoring Manager to get info from COnfiguration too
	
	- refactor all AJAX form submission code to use FormData?
		- if it works, it is musch simpler code!
		
30'	- if "current" config is changed, previous config must be forced inactive if needed
		- maybe need confirm message?
30'	- configuration changes of an active config should be limited
		- or there should be mechanisms to propagate change to MonitoringManager
		(because devices are deep copies of config devices, hence are not up-to-date)
		
15'	- review all .py headers (encoding!)
15'	- ensure all classes use new-style classes (subclass object)
1h	- rename "private" methods with leading underscore (convention)
30'	- review all FIXME/TODO

30'	- refactoring of JavaScript form validation through AJAX
1h	- monitoring UI bug
		- Clear History often leads to CSRF token error???...
30'	- monitoring UI:
		- improve error display in AJAX if possible 
		(avoid flash messages and replace with <p class="help-block">xxx</p>)
		not sure it is OK with inline forms?
		- improve alerts tab when not active, by displaying badge with number of new alerts
		(will require special AJAX code to get the number of new alerts only)
	
	- improve DB model to:
		- have several codes for a config, each with an associated message
		  (typically: owner)
1h	- review models to ensure completeness of relationships and efficiency; in particular
	  try to limit manual queries performed in code if not needed!
		(search for .query.)
2h	- add correct SQL exception handling in all routes
		- unique key => special warning message
		- reference key => other special warning
	
30'	- refactor CSS files (one css per module, with same name as module or 
	  one unique name, the same across all modules...)
30'	- improve CSS files for every screen; check padding/margins in particular
45'	- review labels/titles everywhere

1h+	- improve function to cleanup alert history:
		- for a given config
		- for a given period of time
		- for a given level of alert
		
15'	- check no possible direct access to some routes
30'	- force password change (when password empty)

	- monitoring:
		- [LATER] filter alerts stored upon events when status is unlocked
			- eg presence detected
		
1h	- infer on i18n

	- add email?
	
2h	- add NRF24 and scanning thread
	
